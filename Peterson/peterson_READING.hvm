    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "bool", "value": "False" } }] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "flags" }] },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }] } },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn" }] },
    { "op": "Jump", "pc": "66" },
    { "op": "Frame", "name": "thread", "args": "self" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }] } },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "64", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn" }] },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "36", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn" }] },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "37" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "24", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "Push", "value": { "type": "pc", "value": "38" } },
    { "op": "Nary", "arity": 1, "value": "atLabel" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Push", "value": { "type": "pc", "value": "11" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "self" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "12" },
    { "op": "DelVar", "value": "self" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "pc", "value": "11" } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Push", "value": { "type": "pc", "value": "11" } },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return" },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__ ()","start of method __init__"],
    ["Push ?flags","push constant ?flags"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push [False, False]","push constant [False, False]"],
    ["Store flags","pop a value and store it in shared variable flags"],
    ["Push { 0, 1 }","push constant { 0, 1 }"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Jump 66","set program counter to 66"],
    ["Frame thread self","start of method thread"],
    ["Push { False, True }","push constant { False, True }"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 64","pop a value and jump to 64 if the value is False"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond True 36","pop a value and jump to 36 if the value is True"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar self","push the value of self"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 37","set program counter to 37"],
    ["Push True","push constant True"],
    ["JumpCond False 24","pop a value and jump to 24 if the value is False"],
    ["AtomicInc(False)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc(True)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push PC(38)","push constant PC(38)"],
    ["1-ary atLabel","pop 1 value and push the result of applying atLabel"],
    ["Push ()","push constant ()"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push PC(11)","push constant PC(11)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar self","push the value of self"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar self","push the value of self"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 12","set program counter to 12"],
    ["DelVar self","delete method variable self"],
    ["Return","restore caller method state and push result"],
    ["Push PC(11)","push constant PC(11)"],
    ["Push 0","push constant 0"],
    ["Push ()","push constant ()"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Push PC(11)","push constant PC(11)"],
    ["Push 1","push constant 1"],
    ["Push ()","push constant ()"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Return","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locations": {
    "1": { "file": "peterson.hny", "line": "1", "code": "sequential flags, turn" },
    "2": { "file": "peterson.hny", "line": "1", "code": "sequential flags, turn" },
    "3": { "file": "peterson.hny", "line": "1", "code": "sequential flags, turn" },
    "4": { "file": "peterson.hny", "line": "1", "code": "sequential flags, turn" },
    "5": { "file": "peterson.hny", "line": "3", "code": "flags = [ False, False ]" },
    "6": { "file": "peterson.hny", "line": "3", "code": "flags = [ False, False ]" },
    "7": { "file": "peterson.hny", "line": "4", "code": "turn = choose({0, 1})" },
    "8": { "file": "peterson.hny", "line": "4", "code": "turn = choose({0, 1})" },
    "9": { "file": "peterson.hny", "line": "4", "code": "turn = choose({0, 1})" },
    "10": { "file": "peterson.hny", "line": "6", "code": "def thread(self):" },
    "11": { "file": "peterson.hny", "line": "6", "code": "def thread(self):" },
    "12": { "file": "peterson.hny", "line": "7", "code": "    while choose({ False, True }):" },
    "13": { "file": "peterson.hny", "line": "7", "code": "    while choose({ False, True }):" },
    "14": { "file": "peterson.hny", "line": "7", "code": "    while choose({ False, True }):" },
    "15": { "file": "peterson.hny", "line": "9", "code": "        flags[self] = True" },
    "16": { "file": "peterson.hny", "line": "9", "code": "        flags[self] = True" },
    "17": { "file": "peterson.hny", "line": "9", "code": "        flags[self] = True" },
    "18": { "file": "peterson.hny", "line": "9", "code": "        flags[self] = True" },
    "19": { "file": "peterson.hny", "line": "9", "code": "        flags[self] = True" },
    "20": { "file": "peterson.hny", "line": "10", "code": "        turn = 1 - self" },
    "21": { "file": "peterson.hny", "line": "10", "code": "        turn = 1 - self" },
    "22": { "file": "peterson.hny", "line": "10", "code": "        turn = 1 - self" },
    "23": { "file": "peterson.hny", "line": "10", "code": "        turn = 1 - self" },
    "24": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "25": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "26": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "27": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "28": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "29": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "30": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "31": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "32": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "33": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "34": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "35": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "36": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "37": { "file": "peterson.hny", "line": "11", "code": "        await (not flags[1 - self]) or (turn == self)" },
    "38": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "39": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "40": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "41": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "42": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "43": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "44": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "45": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "46": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "47": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "48": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "49": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "50": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "51": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "52": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "53": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "54": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "55": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "56": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "57": { "file": "peterson.hny", "line": "14", "code": "        @cs: assert atLabel(cs) == { (thread, self): 1 }" },
    "58": { "file": "peterson.hny", "line": "17", "code": "        flags[self] = False" },
    "59": { "file": "peterson.hny", "line": "17", "code": "        flags[self] = False" },
    "60": { "file": "peterson.hny", "line": "17", "code": "        flags[self] = False" },
    "61": { "file": "peterson.hny", "line": "17", "code": "        flags[self] = False" },
    "62": { "file": "peterson.hny", "line": "17", "code": "        flags[self] = False" },
    "63": { "file": "peterson.hny", "line": "17", "code": "        flags[self] = False" },
    "64": { "file": "peterson.hny", "line": "17", "code": "        flags[self] = False" },
    "65": { "file": "peterson.hny", "line": "17", "code": "        flags[self] = False" },
    "66": { "file": "peterson.hny", "line": "19", "code": "spawn thread(0)" },
    "67": { "file": "peterson.hny", "line": "19", "code": "spawn thread(0)" },
    "68": { "file": "peterson.hny", "line": "19", "code": "spawn thread(0)" },
    "69": { "file": "peterson.hny", "line": "19", "code": "spawn thread(0)" },
    "70": { "file": "peterson.hny", "line": "20", "code": "spawn thread(1)" },
    "71": { "file": "peterson.hny", "line": "20", "code": "spawn thread(1)" },
    "72": { "file": "peterson.hny", "line": "20", "code": "spawn thread(1)" },
    "73": { "file": "peterson.hny", "line": "20", "code": "spawn thread(1)" },
    "74": { "file": "peterson.hny", "line": "20", "code": "spawn thread(1)" },
    "75": { "file": "peterson.hny", "line": "20", "code": "spawn thread(1)" }
  }
}
